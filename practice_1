#1)
function max_subarray_sum(arr)
    max_sum = minimum(eltype(arr))
    current_sum = 0  # Текущая сумма

    for num in arr
        current_sum += num 
        if current_sum > max_sum
            max_sum = current_sum 
        end
        if current_sum < 0
            current_sum = 0 
        end
    end
    return max_sum
end
#2)
function sigma(a)
    n=a_sum=a_sum_squar=zero(eltype(a))
    for i in a
        n+=1
        a_sum += i^2
        a_sum_squar += i
    end
    return( ((1/n)*a_sum - (1/ (n^2) )*((a_sum_squar)^2))^0.5)
end
#3)
function polynomial(arr,x)
    poly_val = arr[begin]
    for a in Iterators.drop(arr, 1) 
        poly_val = poly_val*x + a
    end
    return poly_val
end
#4)
#Q_n' = Q_(n-1)'*x + Q_(n-1)*x' = Q_(n-1)'*x + Q_(n-1)
function polynomial_diff(arr,x)
    poly_val = poly_diff = zero(eltype(arr))
    for a in Iterators.drop(arr, 1) 
        poly_diff = poly_diff*x + poly_val
        poly_val = poly_val*x + a
    end
    return poly_val, poly_diff
end
#5)
function extended_euclid(a::T, b::T)
    x0,x1 = one(T), zero(T)
    y0,y1 = zero(T),one(T)

    while !iszero(b)
        # Вычисляем целочисленное деление и остаток
        q = a ÷ b  # Частное
        r = a % b   # Остаток
        
        # Обновляем a и b
        a, b = b, r
        
        # Обновляем коэффициенты x и y
        x0, x1 = x1, x0 - q * x1
        y0, y1 = y1, y0 - q * y1
    end
    return a, x0, y0
end
#6)
struct Residue{T,M}
    value::T

    Residue{T, M}(value::T) where {T, M} = new(value % M)
end

# Функция для нахождения обратного элемента через расширенный алгоритм Евклида
function inv(r::Residue{T, M}) where {T, M}
    a = r.value
    m = M

    # Инициализация переменных для расширенного алгоритма Евклида
    x0, x1 = one(T), zero(T)
    y0, y1 = zero(T), one(T)
    while m != 0
        q = a ÷ m
        a, m = m, a % m
        x0, x1 = x1, x0 - q * x1
        y0, y1 = y1, y0 - q * y1
    end

    # Если a != 1, то обратного элемента не существует
    if a != 1
        throw(ArgumentError("Element is not invertible"))
    end

    # Возвращаем обратный элемент, приведенный по модулю M
    return Residue{T, M}(x0 % M)
end

function Base. +(r1::Residue{T,M},r2::Residue{T,M})where {T, M}
    return Residue{T,M}((r1.value+r2.value) % M)
end

function Base. *(r1::Residue{T, M}, r2::Residue{T, M}) where {T, M}
    return Residue{T, M}((r1.value * r2.value) % M)
end

function Base. -(r1::Residue{T,M},r2::Residue{T,M})where {T, M}
    return Residue{T,M}((r1.value-r2.value) % M)
end
r1 = Residue{Int, 5}(4)
r2 = Residue{Int, 5}(3)

println(r1 + r2)
println(r1 - r2)
println(r1 * r2)
#7)
struct Polynomial{T}
    coeff:: Vector{T}
    function Polynomial(coeff)
        n = length(coeff)
        while n>0 && iszero(coeff[n])
            n-=1
        end
        new{eltype(coeff)}(coeff[1:n])
    end
end

ord(p::Polynomial)=length(p.coeff)-1

function Base.:+(p1::Polynomial{T}, p2::Polynomial{T}) where {T}
    n1 = ord(p1)
    n2 = ord(p2)
    if n1>=n2
        n = copy(p1.coeff)
        n[1:n2+1].+=p2.coeff
    else
        n = copy(p2.coeff)
        n[1:n1+1].+=p1.coeff
    end 
    return Polynomial(n)
end
function Base.:*(p1::Polynomial{T}, p2::Polynomial{T}) where {T}
    n1 = ord(p1)
    n2 = ord(p2)
    coeffs = zeros(T, n1 + n2 + 1)
    for i in eachindex(p1.coeff)
        for j in eachindex(p2.coeff)
            coeffs[i + j - 1] += p1.coeff[i] * p2.coeff[j]
        end
    end
    return Polynomial(coeffs)
end
function (p::Polynomial)(x)
    val=zero(eltype(p.coeff))
    for i in eachindex(p.coeff)
        val+= p.coeff[i] * x^(i-1)
    end
    return val
end
# Реализация кольца вычетов для коэффициентов
struct ResidueRing{T}
    value::T
    modulus::T
    function ResidueRing(value::T, modulus::T) where {T}
        new{T}(mod(value, modulus), modulus)
    end
end
function Base.:-(p1::Polynomial{T}, p2::Polynomial{T}) where {T}
    n1 = ord(p1)
    n2 = ord(p2)
    if n1 >= n2
        n = copy(p1.coeff)
        n[1:n2+1] .-= p2.coeff
    else
        n = -copy(p2.coeff)
        n[1:n1+1] .+= p1.coeff
    end
    return Polynomial(n)
end
# Операции в кольце вычетов
Base.:+(a::ResidueRing{T}, b::ResidueRing{T}) where {T} = ResidueRing(mod(a.value + b.value, a.modulus), a.modulus)
Base.:*(a::ResidueRing{T}, b::ResidueRing{T}) where {T} = ResidueRing(mod(a.value * b.value, a.modulus), a.modulus)

# Кольцо вычетов многочленов (модуль — многочлен)
struct PolynomialRing{T}
    p::Polynomial{T}
    modulus::Polynomial{T}
    function PolynomialRing(p::Polynomial{T}, modulus::Polynomial{T}) where {T}
        # Приводим многочлен по модулю
        while ord(p) >= ord(modulus)
            shift = ord(p) - ord(modulus)
            coeff = zeros(T, shift + 1)
            coeff[end] = p.coeff[end] / modulus.coeff[end]  # Коэффициент для вычитания
            p = p - Polynomial(coeff) * modulus
        end
        new{T}(p, modulus)
    end
end

# Операции в кольце вычетов многочленов
function Base.:+(a::PolynomialRing{T}, b::PolynomialRing{T}) where {T}
    PolynomialRing(a.p + b.p, a.modulus)
end
function Base.:*(a::PolynomialRing{T}, b::PolynomialRing{T}) where {T}
    PolynomialRing(a.p * b.p, a.modulus)
end

p1 = Polynomial([1, 2, 3])  # 1 + 2x + 3x^2
p2 = Polynomial([0, 1, 4])  # x + 4x^2
p4 = p1 + p2
println("p1 + p2 =", p4.coeff)
println(p1(0))
r1 = ResidueRing(5, 3) 
r2 = ResidueRing(7, 3)
println("r1 + r2 = ", r1 + r2)
println("r1 * r2 = ", r1 * r2)
modulus = Polynomial([1, 0, 1])  # x^2 + 1
pr1 = PolynomialRing(Polynomial([1, 2]), modulus)
pr2 = PolynomialRing(Polynomial([0, 1]), modulus)
println("pr1 + pr2 = ", pr1 + pr2)
println("pr1 * pr2 = ", pr1 * pr2)
