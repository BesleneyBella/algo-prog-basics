#1)
function max_subarray_sum(arr)
    max_sum = minimum(eltype(arr))
    current_sum = 0  # Текущая сумма

    for num in arr
        current_sum += num 
        if current_sum > max_sum
            max_sum = current_sum 
        end
        if current_sum < 0
            current_sum = 0 
        end
    end
    return max_sum
end
#2)
function sigma(a)
    n=a_sum=a_sum_squar=zero(eltype(a))
    for i in a
        n+=1
        a_sum += i^2
        a_sum_squar += i
    end
    return( ((1/n)*a_sum - (1/ (n^2) )*((a_sum_squar)^2))^0.5)
end
#3)
function polynomial(arr,x)
    poly_val = arr[begin]
    for a in Iterators.drop(arr, 1) 
        poly_val = poly_val*x + a
    end
    return poly_val
end
#4)
#Q_n' = Q_(n-1)'*x + Q_(n-1)*x' = Q_(n-1)'*x + Q_(n-1)
function polynomial_diff(arr,x)
    poly_val = poly_diff = zero(eltype(arr))
    for a in Iterators.drop(arr, 1) 
        poly_diff = poly_diff*x + poly_val
        poly_val = poly_val*x + a
    end
    return poly_val, poly_diff
end
#5)
function extended_euclid(a::T, b::T)
    x0,x1 = one(T), zero(T)
    y0,y1 = zero(T),one(T)

    while !iszero(b)
        # Вычисляем целочисленное деление и остаток
        q = a ÷ b  # Частное
        r = a % b   # Остаток
        
        # Обновляем a и b
        a, b = b, r
        
        # Обновляем коэффициенты x и y
        x0, x1 = x1, x0 - q * x1
        y0, y1 = y1, y0 - q * y1
    end
    return a, x0, y0
end
#6)
struct Residue{T,M}
    value::T

    Residue{T, M}(value::T) where {T, M} = new(value % M)
end

function Base. +(r1::Residue{T,M},r2::Residue{T,M})where {T, M}
    return Residue{T,M}((r1.value+r2.value) % M)
end

function Base. *(r1::Residue{T, M}, r2::Residue{T, M}) where {T, M}
    return Residue{T, M}((r1.value * r2.value) % M)
end

function Base. -(r1::Residue{T,M},r2::Residue{T,M})where {T, M}
    return Residue{T,M}((r1.value-r2.value) % M)
end
r1 = Residue{Int, 5}(4)
r2 = Residue{Int, 5}(3)

println(r1 + r2)
println(r1 - r2)
println(r1 * r2)
#7)
